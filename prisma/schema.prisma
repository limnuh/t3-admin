// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Search {
    id                  String                @id @default(cuid())
    name                String
    url                 String                @db.VarChar(5000)
    status              SearchStatus          @default(NEW)
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    AgregatedSearchData AgregatedSearchData[] @relation("AgregatedSearchData_to_Search")
    Car                 Car[]                 @relation("Cars_to_Search")

    @@index([id])
}

model AgregatedSearchData {
    id               String   @id @default(cuid())
    searchId         String   @map("Search") @db.Char(30)
    search           Search   @relation("AgregatedSearchData_to_Search", fields: [searchId], references: [id])
    count            Int
    pricePercentiles Int[]
    yearPercentiles  Int[]
    kmPercentiles    Int[]
    createdAt        DateTime @default(now())
}

model Car {
    id            String   @unique
    searchId      String   @map("Search") @db.Char(30)
    search        Search   @relation("Cars_to_Search", fields: [searchId], references: [id])
    link          String
    title         String
    description   String
    image         String
    price         Int
    inactivePrice Int?
    extraData     String
    distance      Int
    km            Int
    year          Int
    history       Json?
    deleted       Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@index([id, price, title])
}

model Log {
    id          String   @id @default(cuid())
    eventType   String
    description String
    createdAt   DateTime @default(now())
}

enum SearchStatus {
    NEW
    RUN
    END
}
